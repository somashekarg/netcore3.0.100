#!/usr/bin/env bash

function install_dotnet() {
  local BUILD_DIR="$1"
  local CACHE_DIR="$2"
  local CORE_VER="$3"
  local ZIP_NAME="dotnet-${CORE_VER}.tar.gz"
  
  echo "Dotnet sdk: $CORE_VER"
  if [ ! -f $CACHE_DIR/$ZIP_NAME ]; then
    # https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.5.md
      local DOTNET_SDK_URL=""
	  if [ "$CORE_VER" == "2.1.4" ]; then
		  DOTNET_SDK_URL="https://download.microsoft.com/download/1/1/5/115B762D-2B41-4AF3-9A63-92D9680B9409/dotnet-sdk-2.1.4-linux-x64.tar.gz"
	  elif [ "$CORE_VER" == "2.1.403" ] || [ "$CORE_VER" == "2.1.4"* ]; then
          DOTNET_SDK_URL="https://download.visualstudio.microsoft.com/download/pr/e85de743-f80b-481b-b10e-d2e37f05a7ce/0bf3ff93417e19ad8d6b2d3ded84d664/dotnet-sdk-2.1.403-linux-x64.tar.gz"
      elif [ "$CORE_VER" == "2.2.104" ] || [ "$CORE_VER" == "2.2"* ]; then
          DOTNET_SDK_URL="https://download.visualstudio.microsoft.com/download/pr/69937b49-a877-4ced-81e6-286620b390ab/8ab938cf6f5e83b2221630354160ef21/dotnet-sdk-2.2.104-linux-x64.tar.gz"
      elif [ "$CORE_VER" == "2.2.103" ] || [ "$CORE_VER" == "2.2"* ]; then
          DOTNET_SDK_URL="https://download.visualstudio.microsoft.com/download/pr/296e116b-30d7-4e1c-8238-ec8c7c4c7b79/43d6cd35d95e38675d472c56a24c3bd0/dotnet-sdk-2.2.103-linux-x64.tar.gz"
      elif [ "$CORE_VER" == "2.2.401" ] || [ "$CORE_VER" == "2.2"* ]; then
          DOTNET_SDK_URL="https://download.visualstudio.microsoft.com/download/pr/228832ea-805f-45ab-8c88-fa36165701b9/16ce29a06031eeb09058dee94d6f5330/dotnet-sdk-2.2.401-linux-x64.tar.gz"
	  elif [ "$CORE_VER" == "2.2.402" ] || [ "$CORE_VER" == "2.2"* ]; then
		  DOTNET_SDK_URL="https://download.visualstudio.microsoft.com/download/pr/46411df1-f625-45c8-b5e7-08ab736d3daa/0fbc446088b471b0a483f42eb3cbf7a2/dotnet-sdk-2.2.402-linux-x64.tar.gz"
	  elif [ "$CORE_VER" == "3.0.100" ] || [ "$CORE_VER" == "3.0"* ]; then
		  DOTNET_SDK_URL="https://download.visualstudio.microsoft.com/download/pr/886b4a4c-30af-454b-8bec-81c72b7b4e1f/d1a0c8de9abb36d8535363ede4a15de6/dotnet-sdk-3.0.100-linux-x64.tar.gz"
	  #elif [ "$CORE_VER" == "2.2.104" ] || [ "$CORE_VER" == "2.2"* ]; then
          #DOTNET_SDK_URL="https://download.visualstudio.microsoft.com/download/pr/69937b49-a877-4ced-81e6-286620b390ab/8ab938cf6f5e83b2221630354160ef21/dotnet-sdk-2.2.104-linux-x64.tar.gz"
      fi
      echo "Download url: $DOTNET_SDK_URL"
      curl -sSL -o $CACHE_DIR/$ZIP_NAME $DOTNET_SDK_URL
  else
    echo "$ZIP_NAME from cache folder"
  fi

  mkdir -p ${BUILD_DIR}/.heroku/dotnet && tar zxf $CACHE_DIR/$ZIP_NAME -C ${BUILD_DIR}/.heroku/dotnet
  ln -s ${BUILD_DIR}/.heroku/dotnet /app
}

# https://github.com/ddollar/heroku-buildpack-apt
function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function apt_install(){
  echo "Install package"

  local apt_cache_dir="$CACHE_DIR/apt/cache"
  local apt_state_dir="$CACHE_DIR/apt/state"
  
  mkdir -p "$apt_cache_dir/archives/partial"
  mkdir -p "$apt_state_dir/lists/partial"
  
  local apt_options="-o debug::nolocking=true -o dir::cache=$apt_cache_dir -o dir::state=$apt_state_dir"
  
  topic "Cleaning apt caches"
  apt-get $apt_options clean | indent
  
  topic "Updating apt caches"
  apt-get  --allow-unauthenticated $apt_options update | indent

  for package in "$@"; do
    if [[ $package == *deb ]]; then
      local package_name=$(basename $package .deb)
      local package_file=$apt_cache_dir/archives/$package_name.deb
      topic "Fetching $package"
      curl -s -L -z $package_file -o $package_file $package 2>&1 | indent
    else
      topic "Fetching .debs for $package"
      apt-get $apt_options -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -d install --reinstall $package | indent
    fi
  done
  
  mkdir -p "$BUILD_DIR/.apt"

  for DEB in $(ls -1 $apt_cache_dir/archives/*.deb); do
    topic "Installing $(basename $DEB)"
    dpkg -x $DEB "$BUILD_DIR/.apt/"
  done
  
  export PATH="$PATH:$BUILD_DIR/.apt/usr/bin"
  export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:${LD_LIBRARY_PATH-}"
  export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:${LIBRARY_PATH-}"
  export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:${INCLUDE_PATH-}"
  export CPATH="${INCLUDE_PATH-}"
  export CPPPATH="${INCLUDE_PATH-}"
  export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:${PKG_CONFIG_PATH-}"
  echo "APT packages Installled"
}

export_env_dir() {
  local env_dir=$1
  if [ -d "$env_dir" ]; then
    local whitelist_regex=${2:-''}
    local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LANG)$'}
    if [ -d "$env_dir" ]; then
      for e in $(ls $env_dir); do
        echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"
        :
      done
    fi
  fi
}
